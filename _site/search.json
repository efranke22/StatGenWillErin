{
  "articles": [
    {
      "path": "data.html",
      "title": "HapMap Data",
      "description": "This page explains information on the data context and cleaning steps necessary to run GWAS and multiple hypothesis testing procedures in RStudio.\n",
      "author": [],
      "contents": "\nIn the Data Analysis and Hypothesis Testing in PLINK tabs of this site, we will explain how to do a GWAS and determine a threshold for a set of genetic data. To follow along, download the 1_QC_GWAS.zip file from this page. This data comes from the International HapMap project (also known as “HapMap”). For more information on the data and project, check out this tutorial.\nData Loading and Organization\nThe following code chunks outline the steps of importing the genetic data.\nIf you have not installed the snpStats package, install it in the console by running the following code chunk.\n\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"snpStats\")\n\n\nLoad libraries:\n\n\nlibrary(snpStats)\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(NatParksPalettes)\nlibrary(parallel)\nlibrary(GGally)     \n\n\nLoad the data, using the correct directory of where you put the HapMap_3_r3_1.fam, HapMap_3_r3_1.bim, and HapMap_3_r3_1.bed files from the 1_QC_GWAS.zip folder. This process uses read.plink(), which reads a genotype matrix, information on the study’s individuals, and information on the SNPs.\n\n\nfam <- 'hapmapData/HapMap_3_r3_1.fam'\nbim <- 'hapmapData/HapMap_3_r3_1.bim'\nbed <- 'hapmapData/HapMap_3_r3_1.bed'\n\nhapmap <- read.plink(bed, bim, fam)\n\n\nUnderstanding the Data\nFirst, get information about the genotype data. We have 165 individuals and 1,457,897 SNPs.\n\n\nhapmap$genotypes\n\nA SnpMatrix with  165 rows and  1457897 columns\nRow names:  NA06989 ... NA12865 \nCol names:  rs2185539 ... rs1973881 \n\nNext, look at the information we have on the individuals in the study. Theoretically, this gives information on family relationships with pedigree, father, and mother, but the father and mother variables contain only missing values. We also have information on the individual’s binary sex, with 1 representing male and 2 female. The affected column represents if the individual had the trait of interest or not, but there are many missing values in this column.\n\n\nhead(hapmap$fam)\n\n        pedigree  member  father  mother sex affected\nNA06989     1328 NA06989    <NA>    <NA>   2        2\nNA11891     1377 NA11891    <NA>    <NA>   1        2\nNA11843     1349 NA11843    <NA>    <NA>   1        1\nNA12341     1330 NA12341    <NA>    <NA>   2        2\nNA12739     1444 NA12739 NA12748 NA12749   1       NA\nNA10850     1344 NA10850    <NA> NA12058   2       NA\n\nFinally, we can look at the information we have on each SNP. This tells us a few things:\nchromosome is the number chromosome (typically 1-23) that the SNP is located on.1 is the largest chromosome (most SNPs) and chromosome size typically decreases from there.\n\nsnp.name is the name of the SNP\ncM stands for centiMorgans, which is a unit for genetic distance. It represents an estimate of how far SNPs are from one another along the genome.\nposition tells us the base pair position of the SNP, with position being being the first nucleotide in our DNA sequence.This number restarts from 1 at each chromosome.\n\nallele.1 is one of the alleles at this SNP, here the minor allele.\nallele.2 is the other allele at this SNP, here the major allele.\n\n\nhead(hapmap$map)\n\n           chromosome   snp.name cM position allele.1 allele.2\nrs2185539           1  rs2185539 NA   556738        T        C\nrs11510103          1 rs11510103 NA   557616        G        A\nrs11240767          1 rs11240767 NA   718814        T        C\nrs3131972           1  rs3131972 NA   742584        A        G\nrs3131969           1  rs3131969 NA   744045        A        G\nrs1048488           1  rs1048488 NA   750775        C        T\n\nData Cleaning\nOne useful piece of information not contained in the data is the minor allele frequency (MAF). This represents the frequency of the minor allele in the dataset. We can add this to our snpMatrix using the snpstats package and add MAF to map, our dataframe that gives us SNP information.\n\n\n#calculate MAF\nmaf <- col.summary(hapmap$genotypes)$MAF\n\n# add new MAF variable to map\nmap <- hapmap$map %>%\n  mutate(MAF = maf)\nhead(map)\n\n           chromosome   snp.name cM position allele.1 allele.2\nrs2185539           1  rs2185539 NA   556738        T        C\nrs11510103          1 rs11510103 NA   557616        G        A\nrs11240767          1 rs11240767 NA   718814        T        C\nrs3131972           1  rs3131972 NA   742584        A        G\nrs3131969           1  rs3131969 NA   744045        A        G\nrs1048488           1  rs1048488 NA   750775        C        T\n                  MAF\nrs2185539  0.00000000\nrs11510103 0.00621118\nrs11240767 0.00000000\nrs3131972  0.15757576\nrs3131969  0.13030303\nrs1048488  0.15853659\n\nJust looking at the MAF for the first six SNPs in our data, we see that in some cases the minor allele frequency is 0. This means that the SNP is monomorphic - everyone in the dataset has the same genotype at these positions. We will remove these monomorphic SNPs - if everyone has the same alleles at a SNP, there is no variation and we cannot find an association between the minor allele and the trait.\nIt can also help to think about why we remove SNPs with a MAF of 0 in a mathematical way. If we are trying to fit a line between the trait of interest and SNP 1, we could model this in the following formats, with linear regression listed first and matrix notation second.\n\\[E[Y|\\text{SNP1}] = \\beta_0 + \\beta1 \\text{SNP1}\\]\n\\[E[\\bf{y}|\\bf{X}] = \\boldsymbol{\\beta} X\\]\nFurther exploring the matrix format, it would look like this:\n\\[X\\boldsymbol{\\beta} = \\begin{bmatrix}\n1 & 0 \\\\\n1 & 0 \\\\\n. & . \\\\\n. & . \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n\\beta_0\\\\\n\\beta_1 \\\\\n\\end{bmatrix}\\]\nExecuting this multiplication, we just get \\(1 * \\beta_0 = 0\\). The is problematic because we have linear dependence. You can get the column of minor allele counts by multiplying the intercept column by 0 - in other words, the minor allele count column is a linear combination of the intercept column. This makes our design matrix not be full rank, making \\(X^TX\\) not invertible and the least squares estimator not defined.\nGiven all these reasons, we remove SNPs with a MAF of 0 using the code below.\n\n\nmap <- map %>%\n  filter(maf >0 )\n\ndim(map)\n\n[1] 1283751       7\n\nAfter filtering, we have 1,283,751 SNPs remaining. Therefore, we removed 174,146 monomorphic SNPs.\nBefore moving on, we must complete one final data cleaning step. The snpstats package uses a format in which genotypes are coded as 01, 02, and 03, with 00 representing missing values.\n\n\nhapmap$genotypes@.Data[1:5,1:5]\n\n        rs2185539 rs11510103 rs11240767 rs3131972 rs3131969\nNA06989        03         03         03        02        02\nNA11891        03         03         03        02        03\nNA11843        03         03         03        03        03\nNA12341        03         03         03        02        02\nNA12739        03         03         03        03        03\n\nWe will convert this to a 0, 1, and 2 format. Now the matrix represents the number of major alleles each person has at each SNP.\n\n\nX <- as(hapmap$genotypes, \"numeric\")\nX[1:5, 1:5]\n\n        rs2185539 rs11510103 rs11240767 rs3131972 rs3131969\nNA06989         2          2          2         1         1\nNA11891         2          2          2         1         2\nNA11843         2          2          2         2         2\nNA12341         2          2          2         1         1\nNA12739         2          2          2         2         2\n\nCreate X.clean by removing the monomorphic SNPs from X.\n\n\nmap.clean <- map %>%\n  filter(MAF >0)\nX.clean <- X[,colnames(X) %in% map.clean$snp.name]\n\n\nThe data is now clean and ready to be used. Check out the Data Analysis next!\n\n\n\n",
      "last_modified": "2022-12-07T16:35:07-06:00"
    },
    {
      "path": "hapmapAnalysis.html",
      "title": "A final analysis of our HapMap data",
      "description": "How we combined our knowledge of multiple hypothesis testing and PLINK results to determine an appropriate significance threshold for our HapMap dataset\n",
      "author": [],
      "contents": "\n\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(snpStats)\nlibrary(NatParksPalettes)\n\n\nLoad hapmap data\nCreate a null trait and write a file to the plink data folder.\n\n\nfam <- 'plinkData/HapMap_3_r3_1.fam'\nbim <- 'plinkData/HapMap_3_r3_1.bim'\nbed <- 'plinkData/HapMap_3_r3_1.bed'\n\nhapmap <- read.plink(bed, bim, fam)\n\n\n\n\nmanhattan_data <- cbind(hapmap$fam %>% select(1:2), trait = rnorm(n = 165, mean = 0, sd = 1))\nwrite_delim(manhattan_data, \"plinkData/manhattandata\")\n\n\nUse command to run GWAS in PLINK, accounting for correlated SNPs\n- ./plink –bfile HapMap_3_r3_1 –assoc –adjust –pheno manhattandata –out as2\nRead in results from PLINK and create Manhattan plot\n\n\nresults <- read_table(\"plinkData/as2.qassoc.adjusted\")\n\nresults_with_position <- results %>%\n  mutate(CHR = as.integer(CHR)) %>%\n  left_join(hapmap$map %>%\n              select(snp.name, position, chromosome), by = c(\"SNP\" = \"snp.name\", \"CHR\" = \"chromosome\"))\n\n\n\n\nresults_with_position %>%\n  mutate(minuslogp = -log10(GC),\n         CHR = as.factor(CHR)) %>%\n  ggplot(aes(x = CHR, y = minuslogp, group = interaction(CHR, position), color = CHR)) + \n  geom_point(position = position_dodge(0.8)) + \n  labs(x = 'chromosome', y = expression(paste('-log'[10],'(p-value)')))+\n  theme_classic()+\n  scale_color_manual(values=natparks.pals(\"DeathValley\",24))+\n  theme(legend.position = \"none\")\n\n\n\nComplete replications\nSimulation based approach. Approximately 14.45 minutes to run GWAS in plink, then 3 minutes 20 seconds to load files into R.\n\n\ncreate_quantitative_trait <- function(i){\n  y <- rnorm(n = 165, mean = 0, sd = 1) \n}\n\ntraits <- as.data.frame(replicate(1000, create_quantitative_trait()))\n\ntraits_identified <- cbind(hapmap$fam %>%\n        select(1:2), traits)\n\nwrite_delim(traits_identified, \"plinkData/traits_identified\")\n\n\n./plink –bfile HapMap_3_r3_1 –assoc –pheno traits_identified –all-pheno –pfilter 1e-3\n\n\ndataFiles <- lapply(Sys.glob(\"plinkData/plink.P*.qassoc\"), read_table)\n\npvalues <- sapply(dataFiles, function(x) min(x$P, na.rm=TRUE))\n\nas.data.frame(pvalues) %>%\n  ggplot(aes(x=pvalues))+\n  geom_density(fill = \"cadetblue\")+\n  theme_classic()+\n  annotate(geom = \"text\", color = \"red\", x = 1e-05, y = 250000, label = \"0.05 quantile:\\n7.31495e-08\", family = \"mono\", cex = 3)+\n  geom_vline(xintercept = 7.31495e-08, color = \"red\", linetype = \"dashed\")+\n  labs(x=\"P-values\", y = \"Density\", title = \"Distribution of minimum p-values for 1000 replications\")+\n  geom_curve(aes(x = 1e-05, y = 270000, xend = 1e-06, yend = 350000), \n             arrow = arrow(length = unit(0.03, \"npc\")), curvature = 0.3, color = \"red\")+\n  theme(plot.title.position = \"plot\", \n        plot.title = element_text(family = \"mono\"), \n        axis.title = element_text(family = \"mono\"), \n        axis.text = element_text(family = \"mono\"))\n\n\nquantile(pvalues, 0.05)\n\n         5% \n7.31495e-08 \n\n\n\n\n",
      "last_modified": "2022-11-17T15:27:15-06:00"
    },
    {
      "path": "HapMapPlink.html",
      "title": "Multiple Hypothesis Testing in PLINK",
      "description": "How to use a more computationally efficient software to determine a threshold\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-12-07T16:33:59-06:00"
    },
    {
      "path": "index.html",
      "title": "An Extension of Multiple Hypothesis Testing in Statistical Genetics",
      "description": "A project by Will Brazgel and Erin Franke exploring multiple hypothesis testing and using PLINK and R to efficiently execute it on genetic data\n",
      "author": [],
      "contents": "\nMotivation here\n\n\n\n",
      "last_modified": "2022-11-16T08:43:59-06:00"
    },
    {
      "path": "multipletesting.html",
      "title": "Multiple Hypothesis Testing",
      "description": "An explanation of the complexities to making statistically significant conclusions when working with genetic data \n",
      "author": [],
      "contents": "\nGenome Wide Association Studies\nIf we compare any two human genomes, they are nearly identical. However, places where DNA sequences differ are known as genetic variants. There are multiple types of genetic variants, but our work is primarily focused on single nucleotide variants (SNVs).\nSNVs : DNA variation that occurs when a single nucleotide in the genome sequence is altered (A vs G at a single position).\n\nGenetic Variant Example\nGenome Wide Association Studies can aid in the determination of which genetic variants are associated with an illness or trait of interest.\nIn order to make statements on whether or not a genetic variant is associated with the trait of interest, we utilize hypothesis testing.\nHypothesis Testing Review\n\n\n\n",
      "last_modified": "2022-12-07T16:14:03-06:00"
    }
  ],
  "collections": []
}
